@page "/"
@using CwAuthorizationService.Dto
@using Brotli
@using CwAuthorizationService.Models
@using System.Net.Http 
@using Newtonsoft.Json
@using System.Net.Http.Headers;
@inject HttpClient Http
@inject NavigationManager Navigate
@inject TokenDto UserToken

<div class="st1">
    <h1>Вход в систему</h1>
    <br />


    <div class="st11">
        <input type="text" @bind=@signIn.Name placeholder="Login" />
    </div>
    <div class="st11">
        <input type="password" @bind=@signIn.Password placeholder="Password" />
    </div>
    <div class="st11">
        <button class="btn btn-primary" @onclick="SendRequest">Войти</button>
    </div>
    <div class="st11">
        <span style="font-size:medium">@UserToken.Jwt</span>
    </div>
    <div class="st11">
        <span style="font-size:medium; color:red">@Message</span>
    </div>
</div>
@code {
    private int currentCount = 0;
    private string Message = null;
    private TokenDto token = new TokenDto();
    private SignIn signIn = new SignIn()
    {
        Name = "Adm",
        Password = "Adm"
    };

    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();
    }

    private async Task SendRequest()
    {
        string sign = JsonConvert.SerializeObject(signIn);
        HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
        httpRequestMessage.Method = new HttpMethod("POST");
        httpRequestMessage.RequestUri = new Uri("http://localhost:6060/api/Token/signin");
        httpRequestMessage.Content = new StringContent(sign);
        httpRequestMessage.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

        var response = await Http.SendAsync(httpRequestMessage);
        var responseStatusCode = response.StatusCode;
        var responseBody = await response.Content.ReadAsStringAsync();

        if (responseStatusCode.ToString() == "OK")
        {
            var result = JsonConvert.DeserializeObject<TokenDto>(responseBody);
            UserToken.Jwt = result.Jwt;
            UserToken.Account = result.Account;
            UserToken.Expires = result.Expires;
            UserToken.RefreshTokenId = result.RefreshTokenId;
            Navigate.NavigateTo("/accounts");
        }
        else
        {
            UserToken.Jwt = "";
            Message = "Ошибка ввода логина или пароля";
        }




    }
}